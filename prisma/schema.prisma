generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String           @unique
  emailVerified    DateTime?
  image            String?
  deletedAt        DateTime?
  isChangingEmail  DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  activated        Boolean          @default(false)
  password         String?
  accounts       Account[]
  authenticators Authenticator[]
  passwordResets PasswordReset[]
  sessions       Session[]
  userTracks     UserTrack[]
  preferences    UserPreferences?

  @@map("users")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  disconnectedAt    DateTime?
  reconnectRequired Boolean   @default(false)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model EmailVerification {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime
  verified  Boolean   @default(false)
  attempts  Int       @default(0)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([email, expires])
  @@map("email_verifications")
}

model SignupActivation {
  id        String    @id @default(cuid())
  email     String
  name      String
  password  String
  token     String    @unique
  expires   DateTime
  activated Boolean   @default(false)
  attempts  Int       @default(0)
  ipAddress String?
  userAgent String?
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([email, expires])
  @@index([token, expires])
  @@map("signup_activations")
}

model PasswordReset {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expires   DateTime
  used      Boolean   @default(false)
  attempts  Int       @default(0)
  ipAddress String?
  userAgent String?
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expires])
  @@map("password_resets")
}

model AuthRateLimit {
  id           String    @id @default(cuid())
  identifier   String
  type         String
  attempts     Int       @default(1)
  windowStart  DateTime  @default(now())
  lastAttempt  DateTime  @default(now())
  blocked      Boolean   @default(false)
  blockedUntil DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  expiresAt    DateTime  @default(dbgenerated("(now() + '01:00:00'::interval)"))

  @@unique([identifier, type])
  @@index([identifier, type, windowStart])
  @@index([expiresAt])
  @@map("auth_rate_limits")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Track {
  id             String    @id @default(cuid())
  title          String
  artist         String
  album          String?
  date           String?   // year as string to match metadata
  albumArt       String?   // unique album art URL for each track
  duration       Int?
  streamUrl      String?
  isrc           String?
  bitDepth       Int?
  sampleRate     Int?
  isNew          Boolean   @default(false)
  isSummer       Boolean   @default(false)
  isVidgames     Boolean   @default(false)
  prevData       Json?     // store previous tracks data as JSON
  
  // Global track data - not user specific
  usersListened  String[]  // Array of user IDs who listened to this track
  totalListens   Int       @default(0) // Total listen count across all users
  upvotes        Int       @default(0) // Global upvote count
  downvotes      Int       @default(0) // Global downvote count  
  rating         Float?    @default(0) // Calculated rating based on votes
  favoriteCount  Int       @default(0) // How many users favorited this track
  
  // Track creation metadata
  firstListenedAt DateTime  @default(now()) // When track was first discovered
  lastListenedAt  DateTime  @default(now()) // When track was last played
  deletedAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  userTracks     UserTrack[]

  // Unique constraint: one track per title+artist+album combination globally
  @@unique([title, artist, album], name: "unique_track_combination")
  @@index([usersListened])
  @@index([lastListenedAt(sort: Desc)])
  @@index([favoriteCount(sort: Desc)])
  @@index([rating(sort: Desc)])
  @@index([totalListens(sort: Desc)])
  @@map("tracks")
}

model UserPreferences {
  id                  String    @id @default(cuid())
  userId              String    @unique
  recentTracksVisible Boolean   @default(true)
  drawerAutoOpen      Boolean   @default(false)
  theme               String    @default("system")
  maxHistoryItems     Int       @default(100)
  showCoverArt        Boolean   @default(true)
  autoMarkFavorites   Boolean   @default(false)
  deletedAt           DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model UserTrack {
  id          String    @id @default(cuid())
  userId      String
  trackId     String
  listenedAt  DateTime  @default(now())
  isFavorite  Boolean   @default(false)
  userRating  Int?      // User's individual rating (-1 for downvote, 1 for upvote)
  listenCount Int       @default(1) // How many times this user listened to this track
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  track       Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)

  // Each user can have only one record per track
  @@unique([userId, trackId], name: "unique_user_track")
  @@index([userId, listenedAt(sort: Desc)])
  @@index([userId, isFavorite])
  @@index([trackId, userId])
  @@map("user_tracks")
}
