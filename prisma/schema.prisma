generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String           @unique
  emailVerified    DateTime?
  image            String?
  deletedAt        DateTime?
  isChangingEmail  DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  activated        Boolean          @default(false)
  password         String?
  accounts       Account[]
  authenticators Authenticator[]
  passwordResets PasswordReset[]
  sessions       Session[]
  tracks         Track[]
  preferences    UserPreferences?

  @@map("users")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  disconnectedAt    DateTime?
  reconnectRequired Boolean   @default(false)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model EmailVerification {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime
  verified  Boolean   @default(false)
  attempts  Int       @default(0)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([email, expires])
  @@map("email_verifications")
}

model SignupActivation {
  id        String    @id @default(cuid())
  email     String
  name      String
  password  String
  token     String    @unique
  expires   DateTime
  activated Boolean   @default(false)
  attempts  Int       @default(0)
  ipAddress String?
  userAgent String?
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([email, expires])
  @@index([token, expires])
  @@map("signup_activations")
}

model PasswordReset {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expires   DateTime
  used      Boolean   @default(false)
  attempts  Int       @default(0)
  ipAddress String?
  userAgent String?
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expires])
  @@map("password_resets")
}

model AuthRateLimit {
  id           String    @id @default(cuid())
  identifier   String
  type         String
  attempts     Int       @default(1)
  windowStart  DateTime  @default(now())
  lastAttempt  DateTime  @default(now())
  blocked      Boolean   @default(false)
  blockedUntil DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  expiresAt    DateTime  @default(dbgenerated("(now() + '01:00:00'::interval)"))

  @@unique([identifier, type])
  @@index([identifier, type, windowStart])
  @@index([expiresAt])
  @@map("auth_rate_limits")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Track {
  id         String    @id @default(cuid())
  title      String
  artist     String
  album      String?
  coverArt   String?
  duration   Int?
  streamUrl  String?
  isrc       String?
  userId     String
  listenedAt DateTime  @default(now())
  isFavorite Boolean   @default(false)
  rating     Int?
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, listenedAt(sort: Desc)])
  @@index([userId, isFavorite])
  @@index([userId, deletedAt])
  @@map("tracks")
}

model UserPreferences {
  id                  String    @id @default(cuid())
  userId              String    @unique
  recentTracksVisible Boolean   @default(true)
  drawerAutoOpen      Boolean   @default(false)
  theme               String    @default("system")
  maxHistoryItems     Int       @default(100)
  showCoverArt        Boolean   @default(true)
  autoMarkFavorites   Boolean   @default(false)
  deletedAt           DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}
